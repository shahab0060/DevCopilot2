// <auto-generated />
using System;
using DevCopilot.DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevCopilot.DataLayer.Migrations
{
    [DbContext(typeof(DevCopilotDbContext))]
    [Migration("20250222212200_AddReactJsInformationToSiteSettingsEntity")]
    partial class AddReactJsInformationToSiteSettingsEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<string>("PluralName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingularName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdType")
                        .HasColumnType("int");

                    b.Property<long?>("InheritedEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcluded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PluralTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingularTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("InheritedEntityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntityRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<string>("FillingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FillingType")
                        .HasColumnType("int");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MiddleEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrimaryPropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.Property<long>("SecondaryEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MiddleEntityId");

                    b.HasIndex("PrimaryPropertyId");

                    b.HasIndex("SecondaryEntityId");

                    b.ToTable("EntityRelations");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntitySelectedProjectArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasApi")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIndex")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWeb")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectAreaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ProjectAreaId");

                    b.ToTable("EntitySelectedProjectAreas");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntitySelectedProjectAreaSelectedFilter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<long>("EntitySelectedProjectAreaId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntitySelectedProjectAreaId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EntitySelectedProjectAreaSelectedFilters");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.GeneralSettings.GeneralSetting", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultReactJsSolutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultReactSolutionLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSolutionLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSolutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GeneralSettings");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreateDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultSolutionLocation = "",
                            DefaultSolutionName = "",
                            EditCounts = 0,
                            IsDelete = false,
                            LatestEditDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Architecture")
                        .HasColumnType("int");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReactProjectLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProjectAreas");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectEnum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEnums");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectEnumProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("ProjectEnumId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProjectEnumId");

                    b.ToTable("ProjectEnumProperties");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Property.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataAnnotationDataType")
                        .HasColumnType("int");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ExcludeFromListDto")
                        .HasColumnType("bit");

                    b.Property<string>("ForceMapperCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFilterContain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFilterEqual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdatable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("MinLength")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PluralName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PluralTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectEnumId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RangeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("RangeTo")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInList")
                        .HasColumnType("bit");

                    b.Property<string>("SingularName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingularTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseEditor")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ProjectEnumId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Property.PropertyImageResizeInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImageResizeInformation");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Template.Template", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AnchorTagCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("BreadcrumbCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckBoxInputCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorPickerInputCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatePageHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<string>("FileInputCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegerInputHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListBoolTdHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListDefaultTdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListFirstThCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListImageTdHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListOtherThCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListPriceTdHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListTextTdHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListViewCardHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListViewHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("SelectInputHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingleImageHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmitBtnCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEditorInputHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextInputHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LatestEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2025, 2, 23, 0, 51, 57, 771, DateTimeKind.Local).AddTicks(9794),
                            EditCounts = 0,
                            IsDelete = false,
                            IsSuperAdmin = true,
                            LastName = "بختیاری",
                            LatestEditDate = new DateTime(2025, 2, 23, 0, 51, 57, 771, DateTimeKind.Local).AddTicks(9896),
                            Name = "شهاب",
                            Password = "ShahabShahab",
                            UserName = "ItsShaab"
                        });
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.Entity", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.User.User", "Author")
                        .WithMany("CreatedEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Entity.Entity", "InheritFromEntity")
                        .WithMany("InheritedEntities")
                        .HasForeignKey("InheritedEntityId");

                    b.HasOne("DevCopilot.Domain.Entities.Project.Project", "Project")
                        .WithMany("Entities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("InheritFromEntity");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntityRelation", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.Entity.Entity", "MiddleEntity")
                        .WithMany("MiddleEntityRelations")
                        .HasForeignKey("MiddleEntityId");

                    b.HasOne("DevCopilot.Domain.Entities.Property.Property", "PrimaryProperty")
                        .WithMany("EntityRelations")
                        .HasForeignKey("PrimaryPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Entity.Entity", "SecondaryEntity")
                        .WithMany("EntityRelations")
                        .HasForeignKey("SecondaryEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MiddleEntity");

                    b.Navigation("PrimaryProperty");

                    b.Navigation("SecondaryEntity");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntitySelectedProjectArea", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("ProjectAreas")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Project.ProjectArea", "ProjectArea")
                        .WithMany("EntitySelectedProjectAreas")
                        .HasForeignKey("ProjectAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("ProjectArea");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntitySelectedProjectAreaSelectedFilter", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.Entity.EntitySelectedProjectArea", "EntitySelectedProjectArea")
                        .WithMany("EntitySelectedProjectAreaSelectedFilters")
                        .HasForeignKey("EntitySelectedProjectAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Property.Property", "Property")
                        .WithMany("EntitySelectedProjectAreaSelectedFilters")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntitySelectedProjectArea");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.Project", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.User.User", "Author")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectArea", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.Project.Project", "Project")
                        .WithMany("ProjectAreas")
                        .HasForeignKey("ProjectId");

                    b.HasOne("DevCopilot.Domain.Entities.Template.Template", "Template")
                        .WithMany("ProjectAreas")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectEnum", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.User.User", "Author")
                        .WithMany("CreatedProjectEnums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Project.Project", "Project")
                        .WithMany("ProjectEnums")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Author");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectEnumProperty", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.User.User", "Author")
                        .WithMany("CreatedProjectEnumProperties")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Project.ProjectEnum", "ProjectEnum")
                        .WithMany("ProjectEnumProperties")
                        .HasForeignKey("ProjectEnumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ProjectEnum");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Property.Property", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.User.User", "Author")
                        .WithMany("CreatedProperties")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Entity.Entity", "Entity")
                        .WithMany("Properties")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Project.ProjectEnum", "ProjectEnum")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectEnumId");

                    b.Navigation("Author");

                    b.Navigation("Entity");

                    b.Navigation("ProjectEnum");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Property.PropertyImageResizeInformation", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.Property.Property", "Property")
                        .WithMany("ImageResizesInformation")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Template.Template", b =>
                {
                    b.HasOne("DevCopilot.Domain.Entities.User.User", "Author")
                        .WithMany("CreatedTemplates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevCopilot.Domain.Entities.Project.Project", "Project")
                        .WithMany("Templates")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Author");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.Entity", b =>
                {
                    b.Navigation("EntityRelations");

                    b.Navigation("InheritedEntities");

                    b.Navigation("MiddleEntityRelations");

                    b.Navigation("ProjectAreas");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Entity.EntitySelectedProjectArea", b =>
                {
                    b.Navigation("EntitySelectedProjectAreaSelectedFilters");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.Project", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("ProjectAreas");

                    b.Navigation("ProjectEnums");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectArea", b =>
                {
                    b.Navigation("EntitySelectedProjectAreas");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Project.ProjectEnum", b =>
                {
                    b.Navigation("ProjectEnumProperties");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Property.Property", b =>
                {
                    b.Navigation("EntityRelations");

                    b.Navigation("EntitySelectedProjectAreaSelectedFilters");

                    b.Navigation("ImageResizesInformation");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.Template.Template", b =>
                {
                    b.Navigation("ProjectAreas");
                });

            modelBuilder.Entity("DevCopilot.Domain.Entities.User.User", b =>
                {
                    b.Navigation("CreatedEntities");

                    b.Navigation("CreatedProjectEnumProperties");

                    b.Navigation("CreatedProjectEnums");

                    b.Navigation("CreatedProjects");

                    b.Navigation("CreatedProperties");

                    b.Navigation("CreatedTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
